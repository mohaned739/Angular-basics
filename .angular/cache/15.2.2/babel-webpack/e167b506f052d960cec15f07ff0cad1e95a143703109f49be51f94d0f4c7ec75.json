{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = function (a0) {\n  return {\n    backgroundColor: a0\n  };\n};\nexport class ServerComponent {\n  constructor() {\n    this.ServerId = 10;\n    this.ServerStatus = 'offline';\n    this.ServerStatus = Math.random() > 0.5 ? 'online' : 'offline';\n  }\n  getServerStatus() {\n    return this.ServerStatus;\n  }\n  getColor() {\n    if (this.ServerStatus === 'offline') {\n      return 'red';\n    }\n    return 'green';\n  }\n}\nServerComponent.ɵfac = function ServerComponent_Factory(t) {\n  return new (t || ServerComponent)();\n};\nServerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ServerComponent,\n  selectors: [[\"app-server\"]],\n  decls: 2,\n  vars: 5,\n  consts: [[3, \"ngStyle\"]],\n  template: function ServerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c0, ctx.getColor()));\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate2(\"Server with ID \", ctx.ServerId, \" is \", ctx.getServerStatus(), \"\");\n    }\n  },\n  dependencies: [i1.NgStyle],\n  styles: [\".online[_ngcontent-%COMP%]{\\n            color: white;\\n        }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2VydmVyL3NlcnZlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtRQUNRO1lBQ0ksWUFBWTtRQUNoQiIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgICAub25saW5le1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICB9XG4gICAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;AAWA,OAAM,MAAOA,eAAe;EAIxBC;IAHA,aAAQ,GAAW,EAAE;IACrB,iBAAY,GAAW,SAAS;IAG5B,IAAI,CAACC,YAAY,GAAGC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,GAAG,QAAQ,GAAG,SAAS;EAClE;EAEOC,eAAe;IAClB,OAAO,IAAI,CAACH,YAAY;EAC5B;EAEOI,QAAQ;IACX,IAAG,IAAI,CAACJ,YAAY,KAAK,SAAS,EAAC;MAC/B,OAAO,KAAK;;IAEhB,OAAO,OAAO;EAClB;;AAjBSF,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAO;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX5BC,4BAA6C;MAAAA,YAAsD;MAAAA,iBAAI;;;MAApGA,oEAAyC;MAACA,eAAsD;MAAtDA,yFAAsD","names":["ServerComponent","constructor","ServerStatus","Math","random","getServerStatus","getColor","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\a845758\\source\\repos\\Learning Angular\\learning-angular\\src\\app\\server\\server.component.ts","C:\\Users\\a845758\\source\\repos\\Learning Angular\\learning-angular\\src\\app\\server\\server.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'app-server',\r\n    templateUrl: './server.component.html',\r\n    styles:[`\r\n        .online{\r\n            color: white;\r\n        }\r\n    `]\r\n})\r\nexport class ServerComponent{\r\n    ServerId: number = 10;\r\n    ServerStatus: string = 'offline';\r\n\r\n    constructor() {\r\n        this.ServerStatus = Math.random() > 0.5 ? 'online' : 'offline';\r\n    }\r\n\r\n    public getServerStatus(){\r\n        return this.ServerStatus;\r\n    }\r\n\r\n    public getColor(){\r\n        if(this.ServerStatus === 'offline'){\r\n            return 'red';\r\n        }\r\n        return 'green';\r\n    }\r\n}","<p [ngStyle]=\"{backgroundColor: getColor()}\">Server with ID {{ ServerId }} is {{getServerStatus()}}</p>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}